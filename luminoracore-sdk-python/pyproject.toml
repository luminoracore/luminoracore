[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "luminoracore-sdk"
version = "1.0.0"
description = "Advanced Python SDK for LuminoraCore personality management"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "LuminoraCore Team", email = "sdk@luminoracore.com"}
]
maintainers = [
    {name = "LuminoraCore Team", email = "sdk@luminoracore.com"}
]
keywords = ["ai", "personality", "session", "llm", "openai", "claude", "async"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Framework :: AsyncIO",
    "Typing :: Typed",
]
requires-python = ">=3.8"
dependencies = [
    # Use local core package during workspace development
    # "luminoracore>=1.0.0,<2.0.0",
    "pydantic>=2.0.0,<3.0.0",
    "httpx>=0.24.0,<1.0.0",
    "aiofiles>=23.0.0,<24.0.0",
    "typing-extensions>=4.5.0; python_version<'3.11'",
    "tenacity>=8.2.0,<9.0.0",
    "structlog>=23.1.0,<24.0.0",
    "opentelemetry-api>=1.18.0,<2.0.0",
    "opentelemetry-sdk>=1.18.0,<2.0.0",
]

[project.optional-dependencies]
openai = ["openai>=1.0.0,<2.0.0"]
anthropic = ["anthropic>=0.7.0,<1.0.0"]
cohere = ["cohere>=4.21.0,<5.0.0"]
google = ["google-generativeai>=0.3.0,<1.0.0"]
redis = ["redis>=4.5.0,<5.0.0"]
postgres = ["asyncpg>=0.28.0,<1.0.0"]
mongodb = ["motor>=3.2.0,<4.0.0"]
all = [
    "openai>=1.0.0,<2.0.0",
    "anthropic>=0.7.0,<1.0.0",
    "cohere>=4.21.0,<5.0.0",
    "google-generativeai>=0.3.0,<1.0.0",
    "redis>=4.5.0,<5.0.0",
    "asyncpg>=0.28.0,<1.0.0",
    "motor>=3.2.0,<4.0.0",
]
dev = [
    "pytest>=7.3.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-benchmark>=4.0.0",
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.3.0",
    "pre-commit>=3.3.0",
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "sphinx-autodoc-typehints>=1.23.0",
    "responses>=0.23.0",
    "aioresponses>=0.7.4",
    "factory-boy>=3.2.1",
    "freezegun>=1.2.2",
]

[project.urls]
Homepage = "https://luminoracore.com/sdk/python"
Documentation = "https://docs.luminoracore.com/sdk/python"
Repository = "https://github.com/luminoracore/sdk-python"
Issues = "https://github.com/luminoracore/sdk-python/issues"
Changelog = "https://github.com/luminoracore/sdk-python/blob/main/CHANGELOG.md"

[tool.setuptools.packages.find]
where = ["."]
include = ["luminoracore*"]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["luminoracore"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
strict_equality = true
plugins = ["pydantic.mypy"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow",
    "integration: marks tests as integration tests", 
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
    "requires_api_key: tests requiring real API keys",
]

[tool.coverage.run]
source = ["luminoracore"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
    "*/examples/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]
