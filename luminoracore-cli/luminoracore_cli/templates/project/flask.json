{
  "name": "Flask LuminoraCore Project",
  "description": "A Flask web application template with LuminoraCore integration",
  "version": "1.0.0",
  "author": "LuminoraCore Team",
  "template_type": "project",
  "files": [
    {
      "path": "app.py",
      "content": "from flask import Flask, request, jsonify, render_template\nfrom flask_cors import CORS\nimport json\nfrom luminoracore import LuminoraCore\n\napp = Flask(__name__)\nCORS(app)\n\n# Initialize LuminoraCore\ncore = LuminoraCore()\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n@app.route('/api/personalities', methods=['GET'])\ndef list_personalities():\n    \"\"\"List available personalities.\"\"\"\n    try:\n        personalities = core.list_personalities()\n        return jsonify({'personalities': personalities})\n    except Exception as e:\n        return jsonify({'error': str(e)}), 500\n\n@app.route('/api/chat', methods=['POST'])\ndef chat():\n    \"\"\"Chat with a personality.\"\"\"\n    try:\n        data = request.get_json()\n        \n        personality_id = data.get('personality_id')\n        message = data.get('message')\n        provider = data.get('provider', 'openai')\n        model = data.get('model', 'gpt-3.5-turbo')\n        \n        if not personality_id or not message:\n            return jsonify({'error': 'personality_id and message are required'}), 400\n        \n        personality = core.load_personality(personality_id)\n        response = personality.generate(\n            message=message,\n            provider=provider,\n            model=model\n        )\n        \n        return jsonify({\n            'response': response,\n            'personality_used': personality_id\n        })\n        \n    except Exception as e:\n        return jsonify({'error': str(e)}), 500\n\n@app.route('/api/personalities/<personality_id>', methods=['GET'])\ndef get_personality(personality_id):\n    \"\"\"Get personality details.\"\"\"\n    try:\n        personality = core.load_personality(personality_id)\n        return jsonify(personality.to_dict())\n    except Exception as e:\n        return jsonify({'error': str(e)}), 404\n\nif __name__ == '__main__':\n    app.run(debug=True, host='0.0.0.0', port=5000)",
      "template_vars": []
    },
    {
      "path": "requirements.txt",
      "content": "Flask>=2.3.0\nFlask-CORS>=4.0.0\nluminoracore>=1.0.0\npython-dotenv>=1.0.0",
      "template_vars": []
    },
    {
      "path": "templates/index.html",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>{{project_name}}</title>\n    <style>\n        body {\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n            max-width: 800px;\n            margin: 0 auto;\n            padding: 20px;\n            background-color: #f5f5f5;\n        }\n        .container {\n            background: white;\n            border-radius: 8px;\n            padding: 30px;\n            box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n        }\n        h1 {\n            color: #333;\n            text-align: center;\n            margin-bottom: 30px;\n        }\n        .chat-container {\n            max-width: 600px;\n            margin: 20px auto;\n            border: 1px solid #ddd;\n            border-radius: 8px;\n            overflow: hidden;\n        }\n        .chat-messages {\n            height: 400px;\n            overflow-y: auto;\n            padding: 20px;\n            background: #f9f9f9;\n        }\n        .message {\n            margin-bottom: 15px;\n            padding: 10px;\n            border-radius: 6px;\n        }\n        .user-message {\n            background: #007bff;\n            color: white;\n            margin-left: 20%;\n        }\n        .bot-message {\n            background: white;\n            border: 1px solid #ddd;\n            margin-right: 20%;\n        }\n        .chat-input {\n            display: flex;\n            padding: 15px;\n            background: white;\n            border-top: 1px solid #ddd;\n        }\n        .chat-input input {\n            flex: 1;\n            padding: 10px;\n            border: 1px solid #ddd;\n            border-radius: 4px;\n            margin-right: 10px;\n        }\n        .chat-input button {\n            padding: 10px 20px;\n            background: #007bff;\n            color: white;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n        }\n        .chat-input button:hover {\n            background: #0056b3;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>{{project_name}}</h1>\n        \n        <div class=\"chat-container\">\n            <div class=\"chat-messages\" id=\"chat-messages\">\n                <div class=\"message bot-message\">\n                    <strong>AI:</strong> Hello! I'm ready to chat. Select a personality and start typing!\n                </div>\n            </div>\n            <div class=\"chat-input\">\n                <input type=\"text\" id=\"chat-input\" placeholder=\"Type your message...\">\n                <button onclick=\"sendMessage()\">Send</button>\n            </div>\n        </div>\n    </div>\n    \n    <script>\n        function addMessage(message, sender) {\n            const messagesContainer = document.getElementById('chat-messages');\n            const messageDiv = document.createElement('div');\n            messageDiv.className = `message ${sender}-message`;\n            \n            if (sender === 'user') {\n                messageDiv.innerHTML = `<strong>You:</strong> ${message}`;\n            } else {\n                messageDiv.innerHTML = `<strong>AI:</strong> ${message}`;\n            }\n            \n            messagesContainer.appendChild(messageDiv);\n            messagesContainer.scrollTop = messagesContainer.scrollHeight;\n        }\n        \n        function sendMessage() {\n            const input = document.getElementById('chat-input');\n            const message = input.value.trim();\n            \n            if (message) {\n                addMessage(message, 'user');\n                \n                fetch('/api/chat', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify({\n                        personality_id: 'assistant',\n                        message: message,\n                        provider: 'openai',\n                        model: 'gpt-3.5-turbo'\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.error) {\n                        addMessage(`Error: ${data.error}`, 'bot');\n                    } else {\n                        addMessage(data.response, 'bot');\n                    }\n                })\n                .catch(error => {\n                    addMessage(`Error: ${error.message}`, 'bot');\n                });\n                \n                input.value = '';\n            }\n        }\n        \n        // Handle Enter key\n        document.getElementById('chat-input').addEventListener('keypress', function(e) {\n            if (e.key === 'Enter') {\n                sendMessage();\n            }\n        });\n    </script>\n</body>\n</html>",
      "template_vars": ["project_name"]
    },
    {
      "path": "personalities/assistant.json",
      "content": "{\n  \"persona\": {\n    \"name\": \"AI Assistant\",\n    \"description\": \"A helpful AI assistant for web applications\",\n    \"archetype\": \"assistant\",\n    \"version\": \"1.0.0\",\n    \"author\": \"{{author}}\",\n    \"tags\": [\"web\", \"assistant\", \"helpful\"]\n  },\n  \"core_traits\": {\n    \"archetype\": \"assistant\",\n    \"temperament\": \"helpful and professional\",\n    \"communication_style\": \"clear and concise\",\n    \"values\": [\"helpfulness\", \"accuracy\", \"efficiency\"],\n    \"motivations\": [\"assisting users\", \"providing information\", \"solving problems\"]\n  },\n  \"linguistic_profile\": {\n    \"tone\": [\"professional\", \"helpful\", \"friendly\"],\n    \"vocabulary\": [\"help\", \"assist\", \"provide\", \"explain\", \"solve\", \"answer\"],\n    \"speech_patterns\": [\"I can help you with that\", \"Let me assist you\", \"Here's how we can solve this\"],\n    \"formality_level\": \"professional\",\n    \"response_length\": \"moderate\"\n  },\n  \"behavioral_rules\": [\n    \"Be helpful and professional\",\n    \"Provide clear and accurate information\",\n    \"Ask clarifying questions when needed\",\n    \"Maintain a friendly but professional tone\",\n    \"Focus on solving user problems efficiently\"\n  ],\n  \"advanced_parameters\": {\n    \"temperature\": 0.7,\n    \"top_p\": 0.9,\n    \"max_tokens\": 500,\n    \"frequency_penalty\": 0.0,\n    \"presence_penalty\": 0.0\n  }\n}",
      "template_vars": ["author"]
    },
    {
      "path": "config/luminoracore.yaml",
      "content": "# LuminoraCore Configuration\ncache_dir: ./cache\nrepository_url: https://api.luminoracore.com/v1\napi_key: null\ntimeout: 30\nmax_retries: 3\nstrict_validation: false\ndefault_provider: openai\ndefault_model: gpt-3.5-turbo\ninclude_metadata: true",
      "template_vars": []
    },
    {
      "path": "README.md",
      "content": "# {{project_name}}\n\n{{description}}\n\n## Features\n\n- Flask web application\n- LuminoraCore personality integration\n- RESTful API endpoints\n- CORS support\n- Interactive chat interface\n\n## Getting Started\n\n1. Install dependencies:\n   ```bash\n   pip install -r requirements.txt\n   ```\n\n2. Configure your API keys in `config/luminoracore.yaml`\n\n3. Run the application:\n   ```bash\n   python app.py\n   ```\n\n4. Open your browser to `http://localhost:5000`\n\n## API Endpoints\n\n- `GET /` - Web interface\n- `GET /api/personalities` - List available personalities\n- `GET /api/personalities/{id}` - Get personality details\n- `POST /api/chat` - Chat with a personality\n\n## Example Usage\n\n```bash\n# List personalities\ncurl http://localhost:5000/api/personalities\n\n# Chat with a personality\ncurl -X POST http://localhost:5000/api/chat \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"personality_id\": \"assistant\",\n    \"message\": \"Hello!\",\n    \"provider\": \"openai\",\n    \"model\": \"gpt-3.5-turbo\"\n  }'\n```\n\n## Development\n\n```bash\n# Install development dependencies\npip install -r requirements-dev.txt\n\n# Run tests\npytest\n\n# Format code\nblack .\nisort .\n```",
      "template_vars": ["project_name", "description"]
    }
  ],
  "template_vars": {
    "project_name": {
      "type": "string",
      "description": "Name of the project",
      "default": "Flask LuminoraCore App"
    },
    "description": {
      "type": "string",
      "description": "Project description",
      "default": "A Flask web application with LuminoraCore integration"
    },
    "author": {
      "type": "string",
      "description": "Author name",
      "default": "Developer"
    }
  },
  "dependencies": [
    "Flask>=2.3.0",
    "Flask-CORS>=4.0.0",
    "luminoracore>=1.0.0",
    "python-dotenv>=1.0.0"
  ],
  "dev_dependencies": [
    "pytest>=7.0.0",
    "pytest-flask>=1.2.0",
    "black>=23.0.0",
    "isort>=5.0.0"
  ]
}
