{
  "name": "Discord Bot Integration",
  "description": "A Discord bot template with LuminoraCore personality integration",
  "version": "1.0.0",
  "author": "LuminoraCore Team",
  "template_type": "integration",
  "files": [
    {
      "path": "bot.py",
      "content": "import discord\nfrom discord.ext import commands\nimport json\nimport os\nfrom luminoracore import LuminoraCore\n\n# Bot configuration\nintents = discord.Intents.default()\nintents.message_content = True\nbot = commands.Bot(command_prefix='!', intents=intents)\n\n# Initialize LuminoraCore\ncore = LuminoraCore()\n\n# Load personality\npersonality_name = os.getenv('PERSONALITY_NAME', 'assistant')\npersonality = core.load_personality(personality_name)\n\n@bot.event\nasync def on_ready():\n    print(f'{bot.user} has connected to Discord!')\n    print(f'Using personality: {personality_name}')\n\n@bot.event\nasync def on_message(message):\n    # Ignore messages from the bot itself\n    if message.author == bot.user:\n        return\n    \n    # Check if the bot is mentioned or if it's a DM\n    if bot.user.mentioned_in(message) or isinstance(message.channel, discord.DMChannel):\n        # Extract the message content (remove mention if present)\n        content = message.content\n        if f'<@{bot.user.id}>' in content:\n            content = content.replace(f'<@{bot.user.id}>', '').strip()\n        \n        # Generate response\n        try:\n            response = personality.generate(\n                message=content,\n                provider=os.getenv('LLM_PROVIDER', 'openai'),\n                model=os.getenv('LLM_MODEL', 'gpt-3.5-turbo')\n            )\n            \n            # Send response (split if too long)\n            if len(response) > 2000:\n                # Split into chunks\n                chunks = [response[i:i+2000] for i in range(0, len(response), 2000)]\n                for chunk in chunks:\n                    await message.channel.send(chunk)\n            else:\n                await message.channel.send(response)\n                \n        except Exception as e:\n            await message.channel.send(f'Sorry, I encountered an error: {str(e)}')\n    \n    # Process commands\n    await bot.process_commands(message)\n\n@bot.command(name='personality')\nasync def personality_info(ctx):\n    \"\"\"Show information about the current personality.\"\"\"\n    persona = personality.persona\n    \n    embed = discord.Embed(\n        title=f\"ðŸ¤– {persona.get('name', 'Unknown')}\",\n        description=persona.get('description', 'No description'),\n        color=discord.Color.blue()\n    )\n    \n    embed.add_field(name=\"Archetype\", value=persona.get('archetype', 'Unknown'), inline=True)\n    embed.add_field(name=\"Version\", value=persona.get('version', 'Unknown'), inline=True)\n    embed.add_field(name=\"Author\", value=persona.get('author', 'Unknown'), inline=True)\n    \n    if persona.get('tags'):\n        embed.add_field(name=\"Tags\", value=', '.join(persona['tags']), inline=False)\n    \n    await ctx.send(embed=embed)\n\n@bot.command(name='ping')\nasync def ping(ctx):\n    \"\"\"Check bot latency.\"\"\"\n    latency = round(bot.latency * 1000)\n    await ctx.send(f'Pong! Latency: {latency}ms')\n\n@bot.command(name='help_bot')\nasync def help_bot(ctx):\n    \"\"\"Show available commands.\"\"\"\n    embed = discord.Embed(\n        title=\"ðŸ¤– Bot Commands\",\n        description=\"Available commands for this bot:\",\n        color=discord.Color.green()\n    )\n    \n    embed.add_field(\n        name=\"Chat\",\n        value=\"Mention the bot or send a DM to chat\",\n        inline=False\n    )\n    \n    embed.add_field(\n        name=\"!personality\",\n        value=\"Show information about the current personality\",\n        inline=False\n    )\n    \n    embed.add_field(\n        name=\"!ping\",\n        value=\"Check bot latency\",\n        inline=False\n    )\n    \n    embed.add_field(\n        name=\"!help_bot\",\n        value=\"Show this help message\",\n        inline=False\n    )\n    \n    await ctx.send(embed=embed)\n\nif __name__ == '__main__':\n    # Get Discord token from environment\n    token = os.getenv('DISCORD_TOKEN')\n    if not token:\n        print('Error: DISCORD_TOKEN environment variable not set')\n        exit(1)\n    \n    bot.run(token)",
      "template_vars": []
    },
    {
      "path": "requirements.txt",
      "content": "discord.py>=2.3.0\nluminoracore>=1.0.0\npython-dotenv>=1.0.0",
      "template_vars": []
    },
    {
      "path": ".env.example",
      "content": "# Discord Bot Configuration\nDISCORD_TOKEN=your-discord-bot-token-here\nPERSONALITY_NAME=assistant\nLLM_PROVIDER=openai\nLLM_MODEL=gpt-3.5-turbo",
      "template_vars": []
    },
    {
      "path": "config/luminoracore.yaml",
      "content": "# LuminoraCore Configuration\ncache_dir: ./cache\nrepository_url: https://api.luminoracore.com/v1\napi_key: null\ntimeout: 30\nmax_retries: 3\nstrict_validation: false\ndefault_provider: openai\ndefault_model: gpt-3.5-turbo\ninclude_metadata: true",
      "template_vars": []
    },
    {
      "path": "README.md",
      "content": "# Discord Bot with LuminoraCore\n\nA Discord bot that uses LuminoraCore personalities for intelligent conversations.\n\n## Features\n\n- Discord bot integration\n- LuminoraCore personality support\n- Multiple LLM provider support\n- Slash commands\n- Embed messages\n- Error handling\n\n## Setup\n\n1. Create a Discord application:\n   - Go to https://discord.com/developers/applications\n   - Click \"New Application\"\n   - Give it a name and create\n   - Go to \"Bot\" section\n   - Click \"Add Bot\"\n   - Copy the bot token\n\n2. Install dependencies:\n   ```bash\n   pip install -r requirements.txt\n   ```\n\n3. Configure environment variables:\n   ```bash\n   cp .env.example .env\n   # Edit .env with your Discord bot token\n   ```\n\n4. Run the bot:\n   ```bash\n   python bot.py\n   ```\n\n## Usage\n\n- Mention the bot in a channel to chat with it\n- Send a DM to the bot for private conversations\n- Use `!personality` to see personality information\n- Use `!ping` to check bot latency\n- Use `!help_bot` to see available commands\n\n## Configuration\n\nEnvironment variables:\n- `DISCORD_TOKEN`: Your Discord bot token\n- `PERSONALITY_NAME`: Name of the personality to use\n- `LLM_PROVIDER`: LLM provider (openai, anthropic, etc.)\n- `LLM_MODEL`: Specific model to use\n\n## Development\n\n```bash\n# Install development dependencies\npip install -r requirements-dev.txt\n\n# Run tests\npytest\n\n# Format code\nblack .\nisort .\n```",
      "template_vars": []
    }
  ],
  "template_vars": {
    "bot_name": {
      "type": "string",
      "description": "Name of the Discord bot",
      "default": "LuminoraCore Bot"
    },
    "personality_name": {
      "type": "string",
      "description": "Default personality to use",
      "default": "assistant"
    }
  },
  "dependencies": [
    "discord.py>=2.3.0",
    "luminoracore>=1.0.0",
    "python-dotenv>=1.0.0"
  ],
  "dev_dependencies": [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "isort>=5.0.0"
  ]
}
